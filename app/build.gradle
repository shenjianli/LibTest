apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy_MMdd_HHmm')
    return formattedDate
}

def releaseTime() {
    return new Date().format("yyyy_MM_dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    signingConfigs {
        config{
            storeFile file('../icbc_release_key')
            storePassword 'Password123!'
            keyAlias 'icbc_release_key'
            keyPassword 'Password123!'
        }
    }


    defaultConfig {
        applicationId "com.shenjianli.lib"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        multiDexEnabled true
    }
    buildTypes {
        release {
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            minifyEnabled false
            zipAlignEnabled true
        }
        debug {
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.config
            minifyEnabled false
            zipAlignEnabled false
        }
    }

//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }

    productFlavors {
        Dev{
            applicationId "com.shenjianli.lib"
            manifestPlaceholders = [app_name:"开发版" ,icon: "@mipmap/ic_launcher",CHANNEL_VALUE:"Dev"]
            //在java代码中具体的使用方式为：context.getResources().getString(R.string.strKey);
            resValue("string" , "strKey","dev版本")
            resValue ('string','isDebug','true')
            buildConfigField "boolean", "AUTO_UPDATES", "false"
            buildConfigField("String","MODE","\"dev\"")
            buildConfigField("String","SERVER_URL","\"http://m.dev.shen.com.cn/\"")
        }
        DevTest{
            applicationId "com.shenjianli.lib.test"
            manifestPlaceholders = [app_name:"自测版" ,icon: "@mipmap/ic_launcher",CHANNEL_VALUE:"Test"]
            //在java代码中具体的使用方式为：context.getResources().getString(R.string.strKey);
            resValue("string" , "strKey","beta版本")
            resValue ('string','isDebug','true')
            buildConfigField "boolean", "AUTO_UPDATES", "false"
            buildConfigField("String","MODE","\"test\"")
            //测试版本主要使用本地MockService来返回数据，可以不设置
            buildConfigField("String","SERVER_URL","\"test\"")

        }
        Releases{
            applicationId "com.shenjianli.lib.release"
            manifestPlaceholders = [app_name:"正式版" ,icon: "@mipmap/ic_launcher_releases",CHANNEL_VALUE:"Releases"]
            resValue("string" , "strKey","release版本")
            resValue ('string','isDebug','false')
            buildConfigField "boolean", "AUTO_UPDATES", "false"
            buildConfigField("String","MODE","\"release\"")
            buildConfigField("String","SERVER_URL","\"http://m.mall.shen.com.cn/\"")
        }
    }

    //添加如下代码
//    productFlavors.all { flavors->
//        flavors.manifestPlaceholders=[CHANNEL_VALUE:name]
//    }
    //修改生成的apk名字
    applicationVariants.all{
        variant->
        variant.outputs.each {
            output->
            def oldFile = output.outputFile
            def newName = '';
            if(variant.buildType.name.equals('release')){
//                println(variant.productFlavors[0].name)
                def releaseApkName = 'product_' + defaultConfig.versionName +
                        '_' + variant.productFlavors[0].name + getDate() +'.apk'
                output.outputFile = new File(oldFile.parent, releaseApkName)
            }
            if(variant.buildType.name.equals('Beta')){
                newName = oldFile.name.replace(".apk", "-v" + defaultConfig.versionName
                        + "-build" + getDate() + ".apk")
                output.outputFile = new File(oldFile.parent, newName)
            }
            if(variant.buildType.name.equals('Dev')){
                output.outputFile = new File(output.outputFile.parent, "ShenLibTest_"
                        + defaultConfig.versionCode + "_v" + defaultConfig.versionName +
                        "_"+buildType.name+"_"+ getDate() +".apk");
            }
        }
    }

    //移除lint检测的error
    lintOptions {
        abortOnError false
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:cardview-v7:23.4.0'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:support-v13:23.4.0'
    compile 'com.android.support:design:23.4.0'
    provided 'com.google.code.gson:gson:2.6.1'
    compile project(':shenlib')
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.jcodecraeer:xrecyclerview:1.2.7'
    compile 'com.android.support:multidex:1.0.0'
    compile 'com.facebook.fresco:fresco:0.12.0'
    //内存泄露检测工具 区分开发、发行版
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    compile 'com.wanjian:sak:0.0.2'
}
